plugins {
  id 'application'
  id 'com.github.johnrengelman.shadow' version '1.2.3'
}

apply plugin: 'groovy'
apply plugin: 'eclipse'

sourceCompatibility = 1.7
version = '1.0'


jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}
def openCensusVersion = '0.13.2'
mainClassName = 'io.vertx.core.Launcher'
def vertxVersion = '3.4.1'
def mainVerticleName = "groovy:vav.MyGroovyVerticle"
def watchForChange = 'src/**/*'
def doOnChange = './gradlew classes'

dependencies {
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'

    compile "io.vertx:vertx-core:$vertxVersion"
    compile "io.vertx:vertx-web:$vertxVersion"
    compile "io.vertx:vertx-lang-groovy:$vertxVersion"
    compile "io.vertx:vertx-hazelcast:$vertxVersion"
    compile "io.vertx:vertx-tcp-eventbus-bridge:$vertxVersion"

    compile "io.opencensus:opencensus-api:$openCensusVersion"
    compile "io.opencensus:opencensus-exporter-trace-logging:$openCensusVersion"
    compile "io.opencensus:opencensus-exporter-trace-jaeger:$openCensusVersion"
    compile "io.opencensus:opencensus-exporter-trace-zipkin:$openCensusVersion"
    runtime "io.opencensus:opencensus-impl:$openCensusVersion"

    compile 'org.springframework.boot:spring-boot-starter-logging:1.3.8.RELEASE'
  
    //compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.1'
    //compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1'

}


shadowJar {
  classifier = 'fat'
  manifest {
    attributes "Main-Verticle": mainVerticleName
  }
  mergeServiceFiles {
    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
  }
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

task wrapper(type: Wrapper) {
  gradleVersion = '3.1'
}


task run( type:JavaExec,  overwrite:true ) {
  main = mainClassName
  classpath = sourceSets.main.runtimeClasspath
  args = [ 'run', mainVerticleName, '-cluster', "-launcher-class=$mainClassName" ]
//  args = [ 'run', mainVerticleName, '--cluster', "--redeploy=$watchForChange", "--launcher-class
}


//run {
//	args = [ 'run', mainVerticleName, '--cluster', "--launcher-class=$mainClassName" ]
//  //  args = [ 'run', mainVerticleName, '--cluster', "--redeploy=$watchForChange", "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange" ]
//  }
  
